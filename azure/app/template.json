{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "resourceNamePrefix": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]"
    },
    "deliveryTeamUserGroupObjectId": {
      "type": "string"
    },
    "alertActionGroupShortName": {
      "type": "string"
    },
    "appServiceDockerCompose": {
      "type": "string"
    },
    "appServiceHostName": {
      "type": "string"
    },
    "appServiceCertificatePassword": {
      "type": "securestring"
    },
    "appServiceAlwaysOn": {
      "type": "bool",
      "defaultValue": true
    },
    "databaseName": {
      "type": "string"
    },
    "databaseUsername": {
      "type": "string"
    },
    "databasePassword": {
      "type": "securestring"
    },
    "alertEmailAddress": {
      "type": "string"
    },
    "RAILS_ENV": {
      "type": "string",
      "defaultValue": "production"
    },
    "RAILS_SERVE_STATIC_FILES": {
      "type": "string",
      "defaultValue": "true"
    },
    "SECRET_KEY_BASE": {
      "type": "securestring"
    },
    "BASIC_AUTH_USERNAME": {
      "type": "securestring"
    },
    "BASIC_AUTH_PASSWORD": {
      "type": "securestring"
    },
    "DFE_SIGN_IN_ISSUER": {
      "type": "string"
    },
    "DFE_SIGN_IN_REDIRECT_BASE_URL": {
      "type": "string"
    },
    "DFE_SIGN_IN_IDENTIFIER": {
      "type": "securestring"
    },
    "DFE_SIGN_IN_SECRET": {
      "type": "securestring"
    },
    "NOTIFY_API_KEY": {
      "type": "securestring"
    },
    "NOTIFY_TEMPLATE_ID": {
      "type": "string"
    },
    "ROLLBAR_ACCESS_TOKEN": {
      "type": "securestring"
    },
    "ROLLBAR_ENV": {
      "type": "string"
    }
  },
  "variables": {
    "deploymentUrlBase": "https://raw.githubusercontent.com/DFE-Digital/bat-platform-building-blocks/master/templates/",

    "principal_Microsoft.Azure.CertificateRegistration": "a6d0a01d-85c7-41f6-9f4e-b344a6082d5b",
    "principal_Microsoft_Azure_App_Service": "a6621090-e704-45ec-b65f-50257f9d4dcd",

    "appServicePlanDeploymentName": "[concat(parameters('resourceNamePrefix'), '-app-service-plan')]",
    "databaseServerFirewallRulesDeploymentName": "[concat(parameters('resourceNamePrefix'), '-database-server-firewall-rules')]",
    "databaseServerDeploymentName": "[concat(parameters('resourceNamePrefix'), '-database-server')]",
    "databaseDeploymentName": "[concat(parameters('resourceNamePrefix'), '-database')]",
    "storageAccountDeploymentName": "[concat(parameters('resourceNamePrefix'), '-storage-account')]",

    "storageAccountName": "[replace(concat(parameters('resourceNamePrefix'), 'storage'), '-', '')]",

    "databaseServerName": "[concat(parameters('resourceNamePrefix'), '-db')]",

    "appServicePlanName": "[concat(parameters('resourceNamePrefix'), '-asp')]",

    "appServiceName": "[concat(parameters('resourceNamePrefix'), '-as')]",
    "appServiceRuntimeStack": "[concat('COMPOSE|', base64(parameters('appServiceDockerCompose')))]",

    "certificateKeyVaultName": "[concat(parameters('resourceNamePrefix'), '-certs-kv')]",

    "appServiceCertificateOrderName": "[concat(parameters('resourceNamePrefix'), '-certs-as')]",
    "appServiceCertificateKeyVaultSecretName": "[variables('appServiceCertificateOrderName')]",
    "appServiceCertificateName": "[concat(parameters('resourceNamePrefix'), '-as-cert')]",

    "alertActionGroupName": "[concat(parameters('resourceNamePrefix'), '-alerts-ag')]",

    "serviceHealthAlertName": "[concat(parameters('resourceNamePrefix'), '-alerts-service-health')]",

    "databaseServerAlertPrefix": "[concat(parameters('resourceNamePrefix'), '-alerts', replace(variables('databaseServerName'), parameters('resourceNamePrefix'), ''))]",
    "databaseServerHighCpuAlertName": "[concat(variables('databaseServerAlertPrefix'), '-high-cpu')]",
    "databaseServerHighMemoryAlertName": "[concat(variables('databaseServerAlertPrefix'), '-high-memory')]",
    "databaseServerHighStorageAlertName": "[concat(variables('databaseServerAlertPrefix'), '-high-storage')]",

    "appServicePlanAlertPrefix": "[concat(parameters('resourceNamePrefix'), '-alerts', replace(variables('appServicePlanName'), parameters('resourceNamePrefix'), ''))]",
    "appServicePlanHighCpuAlertName": "[concat(variables('appServicePlanAlertPrefix'), '-high-cpu')]",
    "appServicePlanHighMemoryAlertName": "[concat(variables('appServicePlanAlertPrefix'), '-high-memory')]",

    "appServiceAlertPrefix": "[concat(parameters('resourceNamePrefix'), '-alerts', replace(variables('appServiceName'), parameters('resourceNamePrefix'), ''))]",
    "appServiceHighResponseTimeAlertName": "[concat(variables('appServiceAlertPrefix'), '-high-response-time')]"
  },
  "resources": [
    {
      "apiVersion": "2017-05-10",
      "name": "[variables('storageAccountDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'), 'storage-account.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "[variables('databaseServerDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": ["[resourceId('Microsoft.Resources/deployments', variables('storageAccountDeploymentName'))]"],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'), 'postgresql-server.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "postgresServerName": {
            "value": "[variables('databaseServerName')]"
          },
          "postgresAdminLogin": {
            "value": "[parameters('databaseUsername')]"
          },
          "postgresAdminPassword": {
            "value": "[parameters('databasePassword')]"
          },
          "securityAlertEmailAddress": {
            "value": "[parameters('alertEmailAddress')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "[variables('databaseDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": ["[resourceId('Microsoft.Resources/deployments', variables('databaseServerDeploymentName'))]"],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'), 'postgresql-database.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "serverName": {
            "value": "[variables('databaseServerName')]"
          },
          "databaseName": {
            "value": "[parameters('databaseName')]"
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "[variables('appServicePlanDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'), 'app-service-plan.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[variables('appServicePlanName')]"
          }
        }
      }
    },
    {
      "apiVersion": "2018-11-01",
      "name": "[variables('appServiceName')]",
      "type": "Microsoft.Web/sites",
      "kind": "app,linux,container",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', variables('appServicePlanDeploymentName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('databaseDeploymentName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('databaseServerDeploymentName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "httpsOnly": true,
        "siteConfig": {
          "alwaysOn": "[parameters('appServiceAlwaysOn')]",
          "httpLoggingEnabled": true,
          "linuxFxVersion": "[variables('appServiceRuntimeStack')]",
          "appSettings": [
            {
              "name": "RAILS_ENV",
              "value": "[parameters('RAILS_ENV')]"
            },
            {
              "name": "RAILS_SERVE_STATIC_FILES",
              "value": "[parameters('RAILS_SERVE_STATIC_FILES')]"
            },
            {
              "name": "DFE_TEACHERS_PAYMENT_SERVICE_DATABASE_USERNAME",
              "value": "[concat(parameters('databaseUsername'), '@', variables('databaseServerName'))]"
            },
            {
              "name": "DFE_TEACHERS_PAYMENT_SERVICE_DATABASE_PASSWORD",
              "value": "[parameters('databasePassword')]"
            },
            {
              "name": "DFE_TEACHERS_PAYMENT_SERVICE_DATABASE_HOST",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('databaseServerDeploymentName'))).outputs.fullyQualifiedDomainName.value]"
            },
            {
              "name": "DFE_TEACHERS_PAYMENT_SERVICE_DATABASE_NAME",
              "value": "[parameters('databaseName')]"
            },
            {
              "name": "SECRET_KEY_BASE",
              "value": "[parameters('SECRET_KEY_BASE')]"
            },
            {
              "name": "BASIC_AUTH_USERNAME",
              "value": "[parameters('BASIC_AUTH_USERNAME')]"
            },
            {
              "name": "BASIC_AUTH_PASSWORD",
              "value": "[parameters('BASIC_AUTH_PASSWORD')]"
            },
            {
              "name": "DFE_SIGN_IN_ISSUER",
              "value": "[parameters('DFE_SIGN_IN_ISSUER')]"
            },
            {
              "name": "DFE_SIGN_IN_REDIRECT_BASE_URL",
              "value": "[parameters('DFE_SIGN_IN_REDIRECT_BASE_URL')]"
            },
            {
              "name": "DFE_SIGN_IN_IDENTIFIER",
              "value": "[parameters('DFE_SIGN_IN_IDENTIFIER')]"
            },
            {
              "name": "DFE_SIGN_IN_SECRET",
              "value": "[parameters('DFE_SIGN_IN_SECRET')]"
            },
            {
              "name": "NOTIFY_API_KEY",
              "value": "[parameters('NOTIFY_API_KEY')]"
            },
            {
              "name": "NOTIFY_TEMPLATE_ID",
              "value": "[parameters('NOTIFY_TEMPLATE_ID')]"
            },
            {
              "name": "ROLLBAR_ACCESS_TOKEN",
              "value": "[parameters('ROLLBAR_ACCESS_TOKEN')]"
            },
            {
              "name": "ROLLBAR_ENV",
              "value": "[parameters('ROLLBAR_ENV')]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "2018-02-14",
      "name": "[variables('certificateKeyVaultName')]",
      "type": "Microsoft.KeyVault/vaults",
      "location": "[resourceGroup().location]",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "family": "A",
          "name": "Standard"
        },
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[parameters('deliveryTeamUserGroupObjectId')]",
            "permissions": {
              "secrets": ["list"]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[variables('principal_Microsoft.Azure.CertificateRegistration')]",
            "permissions": {
              "secrets": ["get", "set", "delete"]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[variables('principal_Microsoft_Azure_App_Service')]",
            "permissions": {
              "secrets": ["get"]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2018-02-01",
      "name": "[variables('appServiceCertificateOrderName')]",
      "type": "Microsoft.CertificateRegistration/certificateOrders",
      "location": "global",
      "properties": {
        "distinguishedName": "[concat('CN=', parameters('appServiceHostName'))]",
        "validityInYears": 1,
        "productType": "StandardDomainValidatedSsl",
        "autoRenew": true
      }
    },
    {
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('appServiceName'), '/', variables('appServiceCertificateOrderName'))]",
      "type": "Microsoft.Web/sites/domainOwnershipIdentifiers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.CertificateRegistration/certificateOrders', variables('appServiceCertificateOrderName'))]",
        "[resourceId('Microsoft.Web/sites', variables('appServiceName'))]"
      ],
      "properties": {
        "id": "[reference(resourceId('Microsoft.CertificateRegistration/certificateOrders', variables('appServiceCertificateOrderName'))).DomainVerificationToken]"
      }
    },
    {
      "apiVersion": "2018-02-01",
      "name": "[concat(variables('appServiceCertificateOrderName'), '/', variables('appServiceCertificateOrderName'))]",
      "type": "Microsoft.CertificateRegistration/certificateOrders/certificates",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.CertificateRegistration/certificateOrders', variables('appServiceCertificateOrderName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('certificateKeyVaultName'))]",
        "[resourceId('Microsoft.Web/sites/domainOwnershipIdentifiers', variables('appServiceName'), variables('appServiceCertificateOrderName'))]"
      ],
      "properties": {
        "keyVaultId": "[resourceId('Microsoft.KeyVault/vaults', variables('certificateKeyVaultName'))]",
        "keyVaultSecretName": "[variables('appServiceCertificateKeyVaultSecretName')]"
      }
    },
    {
      "apiVersion": "2018-11-01",
      "name": "[variables('appServiceCertificateName')]",
      "type": "Microsoft.Web/certificates",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.CertificateRegistration/certificateOrders/certificates', variables('appServiceCertificateOrderName'), variables('appServiceCertificateOrderName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('certificateKeyVaultName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('appServicePlanDeploymentName'))]"
      ],
      "properties": {
        "hostNames": ["[parameters('appServiceHostName')]"],
        "password": "[parameters('appServiceCertificatePassword')]",
        "keyVaultId": "[resourceId('Microsoft.KeyVault/vaults', variables('certificateKeyVaultName'))]",
        "keyVaultSecretName": "[variables('appServiceCertificateKeyVaultSecretName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"
      }
    },
    {
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('appServiceName'), '/', parameters('appServiceHostName'))]",
      "type": "Microsoft.Web/sites/hostnameBindings",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/certificates', variables('appServiceCertificateName'))]",
        "[resourceId('Microsoft.Web/sites', variables('appServiceName'))]"
      ],
      "properties": {
        "sslState": "SniEnabled",
        "thumbprint": "[reference(resourceId('Microsoft.Web/certificates', variables('appServiceCertificateName'))).thumbprint]",
        "toUpdate": true,
        "hostType": "Standard"
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "[variables('databaseServerFirewallRulesDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', variables('databaseServerDeploymentName'))]",
        "[resourceId('Microsoft.Web/sites', variables('appServiceName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'postgresql-server-firewall-rules.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "firewallRuleNamePrefix": {
            "value": "[concat(parameters('resourceNamePrefix'), '-')]"
          },
          "ipAddresses": {
            "value": "[split(reference(resourceId('Microsoft.Web/sites', variables('appServiceName'))).possibleOutboundIpAddresses, ',')]"
          },
          "serverName": {
            "value": "[variables('databaseServerName')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-06-01",
      "type": "Microsoft.Insights/actionGroups",
      "name": "[variables('alertActionGroupName')]",
      "location": "global",
      "properties": {
        "groupShortName": "[parameters('alertActionGroupShortName')]",
        "enabled": true,
        "useCommonAlertSchema": true,
        "emailReceivers": [
          {
            "name": "email",
            "emailAddress": "[parameters('alertEmailAddress')]"
          }
        ]
      }
    },
    {
      "apiVersion": "2017-04-01",
      "type": "Microsoft.Insights/activityLogAlerts",
      "name": "[variables('serviceHealthAlertName')]",
      "location": "global",
      "dependsOn": ["[resourceId('Microsoft.Insights/actionGroups', variables('alertActionGroupName'))]"],
      "properties": {
        "scopes": ["[resourceGroup().id]"],
        "enabled": true,
        "condition": {
          "allOf": [
            {
              "field": "Category",
              "equals": "ServiceHealth"
            }
          ]
        },
        "actions": {
          "actionGroups": [
            {
              "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('alertActionGroupName'))]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "2018-03-01",
      "type": "Microsoft.Insights/metricAlerts",
      "name": "[variables('databaseServerHighCpuAlertName')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', variables('alertActionGroupName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('databaseServerDeploymentName'))]"
      ],
      "properties": {
        "scopes": ["[resourceId('Microsoft.DBforPostgreSQL/servers', variables('databaseServerName'))]"],
        "enabled": true,
        "description": "[concat('Alert when average CPU utilization for ', variables('databaseServerName'), ' is greater than 80%.')]",
        "severity": 0,
        "evaluationFrequency": "PT1M",
        "windowSize": "PT1M",
        "targetResourceType": "Microsoft.DBforPostgreSQL/servers",
        "targetResourceRegion": "[resourceGroup().location]",
        "criteria": {
          "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
          "allOf": [
            {
              "criterionType": "StaticThresholdCriterion",
              "name": "high-cpu",
              "metricNamespace": "Microsoft.DBforPostgreSQL/servers",
              "metricName": "cpu_percent",
              "operator": "GreaterThan",
              "threshold": 80,
              "timeAggregation": "Average"
            }
          ]
        },
        "actions": [
          {
            "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('alertActionGroupName'))]"
          }
        ]
      }
    },
    {
      "apiVersion": "2018-03-01",
      "type": "Microsoft.Insights/metricAlerts",
      "name": "[variables('databaseServerHighMemoryAlertName')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', variables('alertActionGroupName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('databaseServerDeploymentName'))]"
      ],
      "properties": {
        "scopes": ["[resourceId('Microsoft.DBforPostgreSQL/servers', variables('databaseServerName'))]"],
        "enabled": true,
        "description": "[concat('Alert when average memory utilization for ', variables('databaseServerName'), ' is greater than 80%.')]",
        "severity": 0,
        "evaluationFrequency": "PT1M",
        "windowSize": "PT1M",
        "targetResourceType": "Microsoft.DBforPostgreSQL/servers",
        "targetResourceRegion": "[resourceGroup().location]",
        "criteria": {
          "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
          "allOf": [
            {
              "criterionType": "StaticThresholdCriterion",
              "name": "high-memory",
              "metricNamespace": "Microsoft.DBforPostgreSQL/servers",
              "metricName": "memory_percent",
              "operator": "GreaterThan",
              "threshold": 80,
              "timeAggregation": "Average"
            }
          ]
        },
        "actions": [
          {
            "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('alertActionGroupName'))]"
          }
        ]
      }
    },
    {
      "apiVersion": "2018-03-01",
      "type": "Microsoft.Insights/metricAlerts",
      "name": "[variables('databaseServerHighStorageAlertName')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', variables('alertActionGroupName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('databaseServerDeploymentName'))]"
      ],
      "properties": {
        "scopes": ["[resourceId('Microsoft.DBforPostgreSQL/servers', variables('databaseServerName'))]"],
        "enabled": true,
        "description": "[concat('Alert when average storage utilization for ', variables('databaseServerName'), ' is greater than 80%.')]",
        "severity": 0,
        "evaluationFrequency": "PT1M",
        "windowSize": "PT1M",
        "targetResourceType": "Microsoft.DBforPostgreSQL/servers",
        "targetResourceRegion": "[resourceGroup().location]",
        "criteria": {
          "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
          "allOf": [
            {
              "criterionType": "StaticThresholdCriterion",
              "name": "high-storage",
              "metricNamespace": "Microsoft.DBforPostgreSQL/servers",
              "metricName": "storage_percent",
              "operator": "GreaterThan",
              "threshold": 80,
              "timeAggregation": "Average"
            }
          ]
        },
        "actions": [
          {
            "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('alertActionGroupName'))]"
          }
        ]
      }
    },
    {
      "apiVersion": "2018-03-01",
      "type": "Microsoft.Insights/metricAlerts",
      "name": "[variables('appServicePlanHighCpuAlertName')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', variables('alertActionGroupName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('appServicePlanDeploymentName'))]"
      ],
      "properties": {
        "scopes": ["[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"],
        "enabled": true,
        "description": "[concat('Alert when average CPU utilization for ', variables('appServicePlanName'), ' is greater than 80%.')]",
        "severity": 1,
        "evaluationFrequency": "PT1M",
        "windowSize": "PT1M",
        "targetResourceType": "Microsoft.Web/serverfarms",
        "targetResourceRegion": "[resourceGroup().location]",
        "criteria": {
          "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
          "allOf": [
            {
              "criterionType": "StaticThresholdCriterion",
              "name": "high-cpu",
              "metricNamespace": "Microsoft.Web/serverfarms",
              "metricName": "CpuPercentage",
              "operator": "GreaterThan",
              "threshold": 80,
              "timeAggregation": "Average"
            }
          ]
        },
        "actions": [
          {
            "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('alertActionGroupName'))]"
          }
        ]
      }
    },
    {
      "apiVersion": "2018-03-01",
      "type": "Microsoft.Insights/metricAlerts",
      "name": "[variables('appServicePlanHighMemoryAlertName')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', variables('alertActionGroupName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('appServicePlanDeploymentName'))]"
      ],
      "properties": {
        "scopes": ["[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"],
        "enabled": true,
        "description": "[concat('Alert when average memory utilization for ', variables('appServicePlanName'), ' is greater than 80%.')]",
        "severity": 1,
        "evaluationFrequency": "PT1M",
        "windowSize": "PT1M",
        "targetResourceType": "Microsoft.Web/serverfarms",
        "targetResourceRegion": "[resourceGroup().location]",
        "criteria": {
          "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
          "allOf": [
            {
              "criterionType": "StaticThresholdCriterion",
              "name": "high-memory",
              "metricNamespace": "Microsoft.Web/serverfarms",
              "metricName": "MemoryPercentage",
              "operator": "GreaterThan",
              "threshold": 80,
              "timeAggregation": "Average"
            }
          ]
        },
        "actions": [
          {
            "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('alertActionGroupName'))]"
          }
        ]
      }
    },
    {
      "apiVersion": "2018-03-01",
      "type": "Microsoft.Insights/metricAlerts",
      "name": "[variables('appServiceHighResponseTimeAlertName')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', variables('alertActionGroupName'))]",
        "[resourceId('Microsoft.Web/sites', variables('appServiceName'))]"
      ],
      "properties": {
        "scopes": ["[resourceId('Microsoft.Web/sites', variables('appServiceName'))]"],
        "enabled": true,
        "description": "[concat('Alert when average response times for ', variables('appServiceName'), ' are greater than 2 seconds.')]",
        "severity": 1,
        "evaluationFrequency": "PT1M",
        "windowSize": "PT1M",
        "targetResourceType": "Microsoft.Web/sites",
        "targetResourceRegion": "[resourceGroup().location]",
        "criteria": {
          "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
          "allOf": [
            {
              "criterionType": "StaticThresholdCriterion",
              "name": "high-response-time",
              "metricNamespace": "Microsoft.Web/sites",
              "metricName": "AverageResponseTime",
              "operator": "GreaterThan",
              "threshold": 2,
              "timeAggregation": "Average"
            }
          ]
        },
        "actions": [
          {
            "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('alertActionGroupName'))]"
          }
        ]
      }
    }
  ],
  "outputs": {}
}
